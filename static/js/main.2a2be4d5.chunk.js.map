{"version":3,"sources":["Components/Feedback/styles.module.css","Components/Feedback/FeedbackOptions.js","Components/Statistics/Statistics.js","Components/Section/Section.js","Components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","generateId","Math","floor","random","this","props","options","onLeaveFeedback","buttonNames","Object","keys","map","item","className","styles","btn","onClick","Component","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","defaultProps","Notification","message","App","state","clickHandle","evt","stateName","target","textContent","setState","console","log","countTotalFeedBack","values","reduce","acc","countPositiveFeedbackPercentage","percentage","totalScores","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,IAAM,sB,kKCgCTC,E,4MAvBXC,WAAa,WACT,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoB,G,4CAG/C,WAAU,IAAD,OACL,EAAqCC,KAAKC,MAAlCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBACXC,EAAcC,OAAOC,KAAKJ,GAChC,OACI,mCACKE,EAAYG,KAAI,SAAAC,GAAI,OACjB,wBACIC,UAAWC,IAAOC,IAElBC,QAAST,EAHb,SAKKK,GAHI,EAAKZ,uB,GAlBJiB,aC4BfC,E,4JApBX,WACI,MAA0Dd,KAAKC,MAAvDc,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBAEnC,OACI,qCAEI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,gDAAmBC,KAClBC,EACG,mDAAsBA,EAAtB,OAEA,iE,GAtBKN,aCAnBO,E,4JAUF,WACI,OACI,oCACI,6BAAKpB,KAAKC,MAAMoB,QACfrB,KAAKC,MAAMqB,gB,GAdNT,aAAhBO,EACKG,aAAe,CAClBF,MAAO,cAkBAD,QCpBTI,E,4JAQF,WACI,OAAO,4BAAIxB,KAAKC,MAAMwB,c,GATHZ,aAArBW,EACKD,aAAe,CAClBE,QAAS,iBAWFD,QCkDAE,E,4MA3DXC,MAAQ,CACJZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTW,YAAc,SAAAC,GACV,IAAMC,EAAYD,EAAIE,OAAOC,YAC7B,EAAKC,SAAL,eAAiBH,EAAY,EAAKH,MAAMG,GAAa,IACrDI,QAAQC,IAAR,eAAkB,S,EAGtBC,mBAAqB,WAEjB,OADkB/B,OAAOgC,OAAO,EAAKV,OACpBW,QAAO,SAACC,EAAK/B,GAAN,OAAgB+B,EAAO/B,IAAO,I,EAG1DgC,gCAAkC,SAAAtB,GAC9B,GAAc,IAAVA,EACA,OAAO,EAEX,IACMuB,EAAc,IAAMvB,EADJ,EAAKS,MAAMZ,KAEjC,OAAOlB,KAAKC,MAAM2C,I,4CAGtB,WACI,IACId,EAIA3B,KAJA2B,MACAC,EAGA5B,KAHA4B,YACAQ,EAEApC,KAFAoC,mBACAI,EACAxC,KADAwC,gCAEEE,EAAcN,IAEpB,OACI,qCACI,cAAC,EAAD,CAASf,MAAM,wBAAf,SACI,cAAC,EAAD,CAAiBnB,QAASyB,EAAOxB,gBAAiByB,MAGtD,cAAC,EAAD,CAASP,MAAM,aAAf,SACMqB,EAGE,cAAC,EAAD,CACI3B,KAAMY,EAAMZ,KACZC,QAASW,EAAMX,QACfC,IAAKU,EAAMV,IACXC,MAAOkB,IACPjB,mBAAoBqB,EAAgCE,KAPxD,cAAC,EAAD,CAAcjB,QAAQ,+B,GA5C5BZ,a,YCAlB8B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.2a2be4d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"styles_btn__2UzgS\"};","import { Component } from 'react';\r\nimport styles from './styles.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FeedbackOptions extends Component {\r\n    static propTypes = {\r\n        options: PropTypes.object.isRequired,\r\n        onLeaveFeedback: PropTypes.func.isRequired,\r\n    };\r\n\r\n    generateId = () => {\r\n        return Math.floor(Math.random() * 10000) + 1;\r\n    };\r\n\r\n    render() {\r\n        const { options, onLeaveFeedback } = this.props;\r\n        const buttonNames = Object.keys(options);\r\n        return (\r\n            <>\r\n                {buttonNames.map(item => (\r\n                    <button\r\n                        className={styles.btn}\r\n                        key={this.generateId()}\r\n                        onClick={onLeaveFeedback}\r\n                    >\r\n                        {item}\r\n                    </button>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FeedbackOptions;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Statistics extends Component {\r\n    static propTypes = {\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n        total: PropTypes.number.isRequired,\r\n        positivePercentage: PropTypes.number.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const { good, neutral, bad, total, positivePercentage } = this.props;\r\n\r\n        return (\r\n            <>\r\n\r\n                <p>Good: {good}</p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Bad: {bad}</p>\r\n                <h3>Total Scores: {total}</h3>\r\n                {positivePercentage ? (\r\n                    <h3>Positive scores: {positivePercentage}%</h3>\r\n                ) : (\r\n                    <h3>Positive scores: no have</h3>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Section extends Component {\r\n    static defaultProps = {\r\n        title: 'Your title',\r\n    };\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string,\r\n        childer: PropTypes.node.isRequired,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <h2>{this.props.title}</h2>\r\n                {this.props.children}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Section;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Notification extends Component {\r\n    static defaultProps = {\r\n        message: 'empty message',\r\n    };\r\n    static propTypes = {\r\n        message: PropTypes.string,\r\n    };\r\n\r\n    render() {\r\n        return <p>{this.props.message}</p>;\r\n    }\r\n}\r\n\r\nexport default Notification;","import { Component } from 'react';\r\nimport FeedbackOptions from './Components/Feedback/';\r\nimport Statistics from './Components/Statistics';\r\nimport Section from './Components/Section';\r\nimport Notification from './Components/Notification';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n    };\r\n\r\n    clickHandle = evt => {\r\n        const stateName = evt.target.textContent;\r\n        this.setState({ [stateName]: this.state[stateName] + 1 });\r\n        console.log(this, 'this');\r\n    };\r\n\r\n    countTotalFeedBack = () => {\r\n        const allScores = Object.values(this.state);\r\n        return allScores.reduce((acc, item) => (acc += item), 0);\r\n    };\r\n\r\n    countPositiveFeedbackPercentage = total => {\r\n        if (total === 0) {\r\n            return 0;\r\n        }\r\n        const positiveScore = this.state.good;\r\n        const percentage = (100 / total) * positiveScore;\r\n        return Math.floor(percentage);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            state,\r\n            clickHandle,\r\n            countTotalFeedBack,\r\n            countPositiveFeedbackPercentage,\r\n        } = this;\r\n        const totalScores = countTotalFeedBack();\r\n\r\n        return (\r\n            <>\r\n                <Section title=\"Please leave feedback\">\r\n                    <FeedbackOptions options={state} onLeaveFeedback={clickHandle} />\r\n                </Section>\r\n\r\n                <Section title=\"Statistics\">\r\n                    {!totalScores ? (\r\n                        <Notification message=\"No feedback given\" />\r\n                    ) : (\r\n                        <Statistics\r\n                            good={state.good}\r\n                            neutral={state.neutral}\r\n                            bad={state.bad}\r\n                            total={countTotalFeedBack()}\r\n                            positivePercentage={countPositiveFeedbackPercentage(totalScores)}\r\n                        />\r\n                    )}\r\n                </Section>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}